var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/runtime/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameUI":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 0.5, 5);
exports.CameraInitRot = new Laya.Vector3(-5, 0, 0);
/** player */
exports.PlayerResUrl = "res/human.lh";
exports.PlayerInitPos = new Laya.Vector3(-0.05, 0, 4.3);
exports.PlayerInitRot = new Laya.Vector3(90, 160, 0);
exports.PlayerInitScale = new Laya.Vector3(20, 20, 20);
exports.PlayerShootLifeTime = 10;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BulletScript = /** @class */ (function (_super) {
    __extends(BulletScript, _super);
    function BulletScript() {
        var _this = _super.call(this) || this;
        /**子弹生命周期**/
        _this.lifetime = 180;
        /**子弹发射的速度（方向）**/
        _this.speedV3 = new Laya.Vector3();
        _this.power = 10;
        return _this;
    }
    BulletScript.prototype.onAwake = function () {
        this.bullet = this.owner;
    };
    /** 设置子弹射击方向并计算速度 */
    BulletScript.prototype.setDirection = function (origin, direction) {
        /****
         * 注：
         * 三维向量即是位置、方向，也可以是速度，但速度需要一个统一的参考衡量标准，比如“N*标准速度值/帧”或
         * “N*标准速度值/毫秒”，它类似于“N*米/帧”。
         * 而我们得到的方向向量，它的大小不一，无法作为标准速度值使用，这个时候可用Vector3.normalize()方法
         * 把任一向量归一化，产生单位为一的向量作为标准速度值，再把它进行缩放作为不同物体的速度来使用，比如
         * 0.2倍标准速度值，1.5倍标准速度值等，可使用Vector3.scale()方法缩放。
         ****/
        // 设置初始位置
        this.bullet.transform.localPosition = origin.clone();
        //将方向向量归一成单位为一的方向速度向量(在LayaAir中相当于1米的长度)
        Laya.Vector3.normalize(direction, this.speedV3);
        //用缩放方法去调整发射速度，0.2倍标准速度（注：子弹速度过快，可能会越过场景中物品，不发生碰撞！）
        Laya.Vector3.scale(this.speedV3, 0.08, this.speedV3);
    };
    BulletScript.prototype.onUpdate = function () {
        var _this = this;
        //子弹位置更新
        this.bullet.transform.translate(this.speedV3, false);
        //生命周期递减
        this.lifetime--;
        //生命周期结束后，一帧后销毁子弹
        if (this.lifetime < 0) {
            Laya.timer.frameOnce(1, this, function () {
                _this.bullet.removeSelf();
            });
        }
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (otherSp.name !== "bullet") {
            console.log("bullet trigger enter: " + otherSp.name);
            Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
        }
    };
    // public onCollisionEnter(collision: Laya.Collision) {
    // }
    /**
     * 当其他碰撞器进入绑定物体碰撞器后逐帧触发（子弹进入物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerStay = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger stay")
        // console.log(otherSp)
    };
    /**
     * 当其他碰撞器退出绑定物体碰撞器时逐帧触发（子弹穿出物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerExit = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger exit")
        // console.log(otherSp)
        //一帧后销毁子弹
        Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
    };
    BulletScript.prototype.broken = function () {
        this.bullet.removeSelf();
    };
    return BulletScript;
}(Laya.Script3D));
exports.default = BulletScript;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var Zombie = /** @class */ (function (_super) {
    __extends(Zombie, _super);
    function Zombie() {
        var _this = _super.call(this) || this;
        _this.moveStep = 0.001;
        _this.isAttacked = false;
        /**被击退的标准速度（方向）**/
        _this.repelledV3 = new Laya.Vector3();
        _this.origin_life = 1000;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    Zombie.prototype.onAwake = function () {
        this.zombie = this.owner;
        this.life = this.origin_life;
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中盒子时）
     * 注：如相对移动速度过快，可能直接越过
     */
    Zombie.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie trigger enter: " + otherSp.name);
            // let shield = this.owner.parent.getChildAt(0).getComponent(ZombieShield);
            // if (shield && shield.isAttacked) {
            //     shield.isAttacked = false;
            //     return;
            // }
            var bullet = other.owner.getComponent(Bullet_1.default);
            //获取子弹速度为
            this.repelledV3 = bullet.speedV3.clone();
            //被攻击速度归一化成单位一向量
            // Laya.Vector3.normalize(this.repelledV3, this.repelledV3);
            this.repelledV3.x /= 10;
            this.repelledV3.y /= 10;
            this.repelledV3.z /= 10;
            //设置为被攻击状态
            this.isAttacked = true;
            this.zombie.transform.localPositionZ -= 0.1;
            // update life
            this.life -= bullet.power;
            console.log("zombie life: " + this.life + "/" + this.origin_life);
            if (this.life <= 0) {
                console.log("zombie died");
                Laya.timer.frameOnce(1, this, function () {
                    this.zombie.removeSelf();
                });
            }
            console.log(this.zombie.transform.localPositionY);
        }
    };
    Zombie.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie collision enter");
        }
    };
    Zombie.prototype.onTriggerStay = function (other) {
        // console.log("zombie trigger stay");
    };
    Zombie.prototype.onTriggerExit = function (other) {
        // console.log("zombie trigger exit");
    };
    Zombie.prototype.onUpdate = function () {
        // 玩家死亡判断, 僵尸与玩家距离过近
        if (this.zombie.transform.localPositionZ > 4.9) {
            console.log("Player died.");
        }
        // 摆正角度
        this.zombie.transform.localRotationEulerX = 0;
        this.zombie.transform.localRotationEulerY = 0;
        this.zombie.transform.localRotationEulerZ = 0;
        // update postion
        if (!this.isAttacked) {
            this.zombie.transform.localPositionZ += this.moveStep;
        }
        // reset
        this.isAttacked = false;
        // this.zombie.transform.localPositionY = -0.010008610317566946
    };
    return Zombie;
}(Laya.Script3D));
exports.default = Zombie;
},{"../component/Bullet":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var ZombieShield = /** @class */ (function (_super) {
    __extends(ZombieShield, _super);
    function ZombieShield() {
        var _this = _super.call(this) || this;
        _this.isAttacked = false;
        _this.origin_life = 100;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    ZombieShield.prototype.onAwake = function () {
        this.zombieShield = this.owner;
        this.life = this.origin_life;
    };
    ZombieShield.prototype.onTriggerEnter = function (other) {
        var _this = this;
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield trigger enter: " + otherSp.name);
            var bullet = other.owner.getComponent(Bullet_1.default);
            // update life
            this.life -= bullet.power;
            console.log("shield life: " + this.life + "/" + this.origin_life);
            this.isAttacked = true;
            if (this.life <= 0) {
                console.log("shield borken");
                Laya.timer.frameOnce(1, this, function () {
                    // play shield broken effect
                    _this.zombieShield.active = false;
                });
            }
            bullet.broken();
        }
    };
    ZombieShield.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield collision enter");
        }
    };
    ZombieShield.prototype.onTriggerStay = function (other) {
        // console.log("shield trigger stay");
    };
    ZombieShield.prototype.onTriggerExit = function (other) {
        // console.log("shield trigger exit");
    };
    ZombieShield.prototype.onUpdate = function () {
        // let zombieCollider: Laya.PhysicsCollider = this.zombieShield.getComponent(Laya.PhysicsCollider);
        // zombieCollider.
    };
    return ZombieShield;
}(Laya.Script3D));
exports.default = ZombieShield;
},{"../component/Bullet":4}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Zombie_1 = require("../component/Zombie");
var ZombieShield_1 = require("../component/ZombieShield");
var Bullet_1 = require("../component/Bullet");
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        _this.bulletRadius = 0.02;
        _this.bulletVelocity = 0.5;
        _this.zombieId = 0;
        _this.shootTime = 0;
        _this.initScene3D();
        _this.initGround();
        _this.initZombie();
        _this.initBullet();
        _this.initPlayer();
        return _this;
    }
    /** intialize scene */
    GameUI.prototype.initScene3D = function () {
        // add scene
        this.scene3D = Laya.stage.addChild(new Laya.Scene3D());
        // add camera
        this.camera = (this.scene3D.addChild(new Laya.Camera(0, 0.1, 100)));
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRot.clone();
        // add direction light
        var directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.localRotationEuler = new Laya.Vector3(-45, 0, 0);
        // load game scene
        // Laya.Sprite3D.load("res/scene.lh", Laya.Handler.create(this, (res) => {
        //     this.gamescene = this.scene3D.addChild(res) as Laya.MeshSprite3D;
        //     this.gamescene.name = "game_scene";
        // }));
    };
    /** initialize player mesh */
    GameUI.prototype.initPlayer = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.PlayerResUrl, Laya.Handler.create(this, function (res) {
            _this.player = res;
            _this.scene3D.addChild(_this.player);
            _this.playerAni = _this.player.getComponent(Laya.Animator);
            _this.player.transform.localPosition = Const.PlayerInitPos.clone();
            _this.player.transform.localRotationEuler = Const.PlayerInitRot.clone();
            _this.player.transform.localScale = Const.PlayerInitScale.clone();
            _this.player.name = "player";
            // mouse click event listen: shoot a bullet
            Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
            // onUpdate
            _this.initGameStage();
        }));
    };
    /** initialize zombie mesh */
    GameUI.prototype.initZombie = function () {
        var _this = this;
        Laya.Sprite3D.load("res/zombie_police.lh", Laya.Handler.create(this, function (res) {
            _this._zombie = res;
            // this.zomnbieAni = this._zombie.getComponent(Laya.Animator);
            _this._zombie.transform.localRotationEulerX += 90;
            _this._zombie.transform.localScale = Const.PlayerInitScale.clone();
            _this._zombie.name = "_zombie";
        }));
    };
    /** initialize bullet mesh */
    GameUI.prototype.initBullet = function () {
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(this.bulletRadius));
        var mat = new Laya.BlinnPhongMaterial();
        mat.albedoColor = new Laya.Vector4(1, 0, 0, 1);
        this._bullet.meshRenderer.material = mat;
        // add collider
        var bulletCollider = this._bullet.addComponent(Laya.PhysicsCollider);
        var bulletColliderShape = new Laya.MeshColliderShape();
        bulletColliderShape.mesh = this._bullet.meshFilter.sharedMesh;
        bulletCollider.colliderShape = bulletColliderShape;
        // 快速移动物体连续检测
        bulletCollider.ccdMotionThreshold = 0.0001;
        bulletCollider.ccdSweptSphereRadius = this.bulletRadius;
        bulletCollider.isTrigger = true;
        // let bulletRigid: Laya.Rigidbody3D = this._bullet.addComponent(Laya.Rigidbody3D);
        // bulletRigid.colliderShape = new Laya.SphereColliderShape(0.02);
        // bulletRigid.gravity = new Laya.Vector3(0, 0, 0);
        // set bullets' original point
        this.bullet_origin = new Laya.Vector3(0, 0, 1);
        this._bullet.name = "_bullet";
    };
    /** initialize ground */
    GameUI.prototype.initGround = function () {
        this.ground = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(20, 20));
        this.scene3D.addChild(this.ground);
        var groundCollider = this.ground.addComponent(Laya.Rigidbody3D);
        var groundColliderShape = new Laya.MeshColliderShape();
        groundColliderShape.mesh = this.ground.meshFilter.sharedMesh;
        groundCollider.colliderShape = groundColliderShape;
        groundCollider.isKinematic = true;
        this.ground.name = "ground";
    };
    /** init game stage: zombie */
    GameUI.prototype.initGameStage = function () {
        var _this = this;
        this.zombieId = 0;
        var cnt = 0;
        // 设置玩家射击动作循环播放
        this.playerAni.getDefaultState().clip.islooping = true;
        this.playerAni.play();
        Laya.timer.frameLoop(1, this, function () {
            // create zombies
            if (_this._zombie && cnt++ % 60 === 0 && _this.zombieId < 10) {
                _this.createZombie();
                _this.zombieId++;
            }
            // play shooting animation
            _this.shootTime--;
            if (_this.shootTime < 0) {
                // stop playing
                _this.playerAni.speed = 0;
            }
        });
    };
    /** create a zombie */
    GameUI.prototype.createZombie = function () {
        var zombie = this._zombie.clone();
        this.scene3D.addChild(zombie);
        zombie.getComponent(Laya.Rigidbody3D).isKinematic = false;
        zombie.getChildAt(0).getComponent(Laya.Rigidbody3D).isKinematic = false;
        // add zombie body script
        zombie.addComponent(Zombie_1.default);
        // add zombie shield script
        zombie.getChildAt(0).addComponent(ZombieShield_1.default);
        zombie.transform.localPositionX += (Math.random() - 0.5) * 2;
        zombie.name = "zombie_" + this.zombieId;
        console.log("new zombie: " + zombie.name);
        // let zombie1: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie1);
        // zombie1.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie1.addComponent(Zombie);
        // zombie1.getChildAt(0).addComponent(ZombieShield);
        // zombie1.transform.localPositionX += 0.5;
        // zombie1.transform.localRotationEulerY += 90;
        // zombie1.name = "zombie_1";
        // let zombie2: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie2);
        // zombie2.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie2.addComponent(Zombie);
        // zombie2.getChildAt(0).addComponent(ZombieShield);
        // zombie2.transform.localPositionX -= 0.5;
        // zombie2.transform.localPositionY += 0.2;
        // zombie2.transform.localRotationEulerX += 90;
        // zombie2.name = "zombie_2";
    };
    /** mouse click event: shoot a bullet */
    GameUI.prototype.onClick = function () {
        // play shoot animation
        this.shootTime = Const.PlayerShootLifeTime;
        this.playerAni.speed = 1;
        // get ray
        var point = new Laya.Vector2();
        point.x = Laya.MouseManager.instance.mouseX;
        point.y = Laya.MouseManager.instance.mouseY;
        var ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        this.camera.viewportPointToRay(point, ray);
        // raycast detection
        var hitResult = [];
        if (this.scene3D.physicsSimulation.rayCastAll(ray, hitResult, 30)) {
            for (var _i = 0, hitResult_1 = hitResult; _i < hitResult_1.length; _i++) {
                var item = hitResult_1[_i];
                // console.log(item.collider.owner.name);
            }
        }
        // generate bullet
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        var bulletScript = bullet.addComponent(Bullet_1.default);
        bulletScript.setDirection(ray.origin, ray.direction);
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"../Const":3,"../component/Bullet":4,"../component/Zombie":5,"../component/ZombieShield":6,"./../../ui/layaMaxUI":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1Byb2dyYW0gRmlsZXMvTGF5YUFpci9MYXlhQWlySURFX2JldGEvcmVzb3VyY2VzL2FwcC9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwic3JjL0dhbWVDb25maWcudHMiLCJzcmMvTWFpbi50cyIsInNyYy9zY3JpcHQvQ29uc3QudHMiLCJzcmMvc2NyaXB0L2NvbXBvbmVudC9CdWxsZXQudHMiLCJzcmMvc2NyaXB0L2NvbXBvbmVudC9ab21iaWUudHMiLCJzcmMvc2NyaXB0L2NvbXBvbmVudC9ab21iaWVTaGllbGQudHMiLCJzcmMvc2NyaXB0L3J1bnRpbWUvR2FtZVVJLnRzIiwic3JjL3VpL2xheWFNYXhVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNWQSxnR0FBZ0c7QUFDaEcsa0RBQTRDO0FBQzVDOztFQUVFO0FBQ0Y7SUFhSTtJQUFjLENBQUM7SUFDUixlQUFJLEdBQVg7UUFDSSxJQUFJLEdBQUcsR0FBYSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxHQUFHLENBQUMsMEJBQTBCLEVBQUMsZ0JBQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFoQk0sZ0JBQUssR0FBUSxHQUFHLENBQUM7SUFDakIsaUJBQU0sR0FBUSxJQUFJLENBQUM7SUFDbkIsb0JBQVMsR0FBUSxZQUFZLENBQUM7SUFDOUIscUJBQVUsR0FBUSxNQUFNLENBQUM7SUFDekIsaUJBQU0sR0FBUSxLQUFLLENBQUM7SUFDcEIsaUJBQU0sR0FBUSxNQUFNLENBQUM7SUFDckIscUJBQVUsR0FBSyxzQkFBc0IsQ0FBQztJQUN0QyxvQkFBUyxHQUFRLEVBQUUsQ0FBQztJQUNwQixnQkFBSyxHQUFTLEtBQUssQ0FBQztJQUNwQixlQUFJLEdBQVMsSUFBSSxDQUFDO0lBQ2xCLHVCQUFZLEdBQVMsS0FBSyxDQUFDO0lBQzNCLDRCQUFp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SUFBQSxJQUFJLENBVXBCO0lBVmdCLFdBQUEsSUFBSTtRQUNqQjtZQUFpQywrQkFBSztZQUVsQzt1QkFBZSxpQkFBTztZQUFBLENBQUM7WUFDdkIsb0NBQWMsR0FBZDtnQkFDSSxpQkFBTSxjQUFjLFdBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFDTCxrQkFBQztRQUFELENBUEEsQUFPQyxDQVBnQyxLQUFLLEdBT3JDO1FBUFksZ0JBQVcsY0FPdkIsQ0FBQTtRQUNELEdBQUcsQ0FBQyxxQkFBcUIsRUFBQyxXQUFXLENBQUMsQ0FBQztJQUMzQyxDQUFDLEVBVmdCLElBQUksR0FBSixPQUFJLEtBQUosT0FBSSxRQVVwQjtBQUFELENBQUMsRUFWYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFVZiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cclxuaW1wb3J0IEdhbWVVSSBmcm9tIFwiLi9zY3JpcHQvcnVudGltZS9HYW1lVUlcIlxyXG4vKlxyXG4qIOa4uOaIj+WIneWni+WMlumFjee9rjtcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbmZpZ3tcclxuICAgIHN0YXRpYyB3aWR0aDpudW1iZXI9NjQwO1xyXG4gICAgc3RhdGljIGhlaWdodDpudW1iZXI9MTEzNjtcclxuICAgIHN0YXRpYyBzY2FsZU1vZGU6c3RyaW5nPVwiZml4ZWR3aWR0aFwiO1xyXG4gICAgc3RhdGljIHNjcmVlbk1vZGU6c3RyaW5nPVwibm9uZVwiO1xyXG4gICAgc3RhdGljIGFsaWduVjpzdHJpbmc9XCJ0b3BcIjtcclxuICAgIHN0YXRpYyBhbGlnbkg6c3RyaW5nPVwibGVmdFwiO1xyXG4gICAgc3RhdGljIHN0YXJ0U2NlbmU6YW55PVwidGVzdC9UZXN0U2NlbmUuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49dHJ1ZTtcclxuICAgIHN0YXRpYyBwaHlzaWNzRGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBleHBvcnRTY2VuZVRvSnNvbjpib29sZWFuPXRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdmFyIHJlZzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XHJcbiAgICAgICAgcmVnKFwic2NyaXB0L3J1bnRpbWUvR2FtZVVJLnRzXCIsR2FtZVVJKTtcclxuICAgIH1cclxufVxyXG5HYW1lQ29uZmlnLmluaXQoKTsiLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHRlbHNlIExheWEuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVtcIldlYkdMXCJdKTtcclxuXHRcdExheWFbXCJQaHlzaWNzXCJdICYmIExheWFbXCJQaHlzaWNzXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhLnN0YWdlLnNjYWxlTW9kZSA9IEdhbWVDb25maWcuc2NhbGVNb2RlO1xyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cdFx0Ly/lhbzlrrnlvq7kv6HkuI3mlK/mjIHliqDovb1zY2VuZeWQjue8gOWcuuaZr1xyXG5cdFx0TGF5YS5VUkwuZXhwb3J0U2NlbmVUb0pzb24gPSBHYW1lQ29uZmlnLmV4cG9ydFNjZW5lVG9Kc29uO1xyXG5cclxuXHRcdC8v5omT5byA6LCD6K+V6Z2i5p2/77yI6YCa6L+HSURF6K6+572u6LCD6K+V5qih5byP77yM5oiW6ICFdXJs5Zyw5Z2A5aKe5YqgZGVidWc9dHJ1ZeWPguaVsO+8jOWdh+WPr+aJk+W8gOiwg+ivlemdouadv++8iVxyXG5cdFx0aWYgKEdhbWVDb25maWcuZGVidWcgfHwgTGF5YS5VdGlscy5nZXRRdWVyeVN0cmluZyhcImRlYnVnXCIpID09IFwidHJ1ZVwiKSBMYXlhLmVuYWJsZURlYnVnUGFuZWwoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5zdGF0KSBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0TGF5YS5hbGVydEdsb2JhbEVycm9yID0gdHJ1ZTtcclxuXHJcblx0XHQvL+a/gOa0u+i1hOa6kOeJiOacrOaOp+WItu+8jHZlcnNpb24uanNvbueUsUlEReWPkeW4g+WKn+iDveiHquWKqOeUn+aIkO+8jOWmguaenOayoeacieS5n+S4jeW9seWTjeWQjue7rea1geeoi1xyXG5cdFx0TGF5YS5SZXNvdXJjZVZlcnNpb24uZW5hYmxlKFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vblZlcnNpb25Mb2FkZWQpLCBMYXlhLlJlc291cmNlVmVyc2lvbi5GSUxFTkFNRV9WRVJTSU9OKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0R2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCIvKiogdmVyc2lvbiAqL1xyXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS4wLjBcIjtcclxuXHJcbi8qKiBjYW1lcmEgKi9cclxuZXhwb3J0IGNvbnN0IENhbWVyYUluaXRQb3M6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoMCwgMC41LCA1KTtcclxuZXhwb3J0IGNvbnN0IENhbWVyYUluaXRSb3Q6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoLTUsIDAsIDApO1xyXG5cclxuLyoqIHBsYXllciAqL1xyXG5leHBvcnQgY29uc3QgUGxheWVyUmVzVXJsOiBzdHJpbmcgPSBcInJlcy9odW1hbi5saFwiO1xyXG5leHBvcnQgY29uc3QgUGxheWVySW5pdFBvczogTGF5YS5WZWN0b3IzID0gbmV3IExheWEuVmVjdG9yMygtMC4wNSwgMCwgNC4zKTtcclxuZXhwb3J0IGNvbnN0IFBsYXllckluaXRSb3Q6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoOTAsIDE2MCwgMCk7XHJcbmV4cG9ydCBjb25zdCBQbGF5ZXJJbml0U2NhbGU6IExheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoMjAsIDIwLCAyMCk7XHJcbmV4cG9ydCBjb25zdCBQbGF5ZXJTaG9vdExpZmVUaW1lOiBudW1iZXIgPSAxMDsiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVsbGV0U2NyaXB0IGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcbiAgICAvKirooqvnu5HlrprnmoTlrZDlvLnlr7nosaEqKi9cclxuICAgIHByaXZhdGUgYnVsbGV0OiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIC8qKuWtkOW8ueeUn+WRveWRqOacnyoqL1xyXG4gICAgcHJpdmF0ZSBsaWZldGltZTogbnVtYmVyID0gMTgwO1xyXG4gICAgLyoq5a2Q5by55Y+R5bCE55qE6YCf5bqm77yI5pa55ZCR77yJKiovXHJcbiAgICBwdWJsaWMgc3BlZWRWMzogTGF5YS5WZWN0b3IzID0gbmV3IExheWEuVmVjdG9yMygpO1xyXG5cclxuICAgIHB1YmxpYyBwb3dlcjogbnVtYmVyID0gMTA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkF3YWtlKCkge1xyXG4gICAgICAgIHRoaXMuYnVsbGV0ID0gdGhpcy5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u5a2Q5by55bCE5Ye75pa55ZCR5bm26K6h566X6YCf5bqmICovXHJcbiAgICBwdWJsaWMgc2V0RGlyZWN0aW9uKG9yaWdpbjogTGF5YS5WZWN0b3IzLCBkaXJlY3Rpb246IExheWEuVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgICAgIC8qKioqXHJcbiAgICAgICAgICog5rOo77yaXHJcbiAgICAgICAgICog5LiJ57u05ZCR6YeP5Y2z5piv5L2N572u44CB5pa55ZCR77yM5Lmf5Y+v5Lul5piv6YCf5bqm77yM5L2G6YCf5bqm6ZyA6KaB5LiA5Liq57uf5LiA55qE5Y+C6ICD6KGh6YeP5qCH5YeG77yM5q+U5aaC4oCcTirmoIflh4bpgJ/luqblgLwv5bin4oCd5oiWXHJcbiAgICAgICAgICog4oCcTirmoIflh4bpgJ/luqblgLwv5q+r56eS4oCd77yM5a6D57G75Ly85LqO4oCcTirnsbMv5bin4oCd44CCXHJcbiAgICAgICAgICog6ICM5oiR5Lus5b6X5Yiw55qE5pa55ZCR5ZCR6YeP77yM5a6D55qE5aSn5bCP5LiN5LiA77yM5peg5rOV5L2c5Li65qCH5YeG6YCf5bqm5YC85L2/55So77yM6L+Z5Liq5pe25YCZ5Y+v55SoVmVjdG9yMy5ub3JtYWxpemUoKeaWueazlVxyXG4gICAgICAgICAqIOaKiuS7u+S4gOWQkemHj+W9kuS4gOWMlu+8jOS6p+eUn+WNleS9jeS4uuS4gOeahOWQkemHj+S9nOS4uuagh+WHhumAn+W6puWAvO+8jOWGjeaKiuWug+i/m+ihjOe8qeaUvuS9nOS4uuS4jeWQjOeJqeS9k+eahOmAn+W6puadpeS9v+eUqO+8jOavlOWmglxyXG4gICAgICAgICAqIDAuMuWAjeagh+WHhumAn+W6puWAvO+8jDEuNeWAjeagh+WHhumAn+W6puWAvOetie+8jOWPr+S9v+eUqFZlY3RvcjMuc2NhbGUoKeaWueazlee8qeaUvuOAglxyXG4gICAgICAgICAqKioqL1xyXG4gICAgICAgIC8vIOiuvue9ruWIneWni+S9jee9rlxyXG4gICAgICAgIHRoaXMuYnVsbGV0LnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uID0gb3JpZ2luLmNsb25lKCk7XHJcbiAgICAgICAgLy/lsIbmlrnlkJHlkJHph4/lvZLkuIDmiJDljZXkvY3kuLrkuIDnmoTmlrnlkJHpgJ/luqblkJHph48o5ZyoTGF5YUFpcuS4reebuOW9k+S6jjHnsbPnmoTplb/luqYpXHJcbiAgICAgICAgTGF5YS5WZWN0b3IzLm5vcm1hbGl6ZShkaXJlY3Rpb24sIHRoaXMuc3BlZWRWMyk7XHJcbiAgICAgICAgLy/nlKjnvKnmlL7mlrnms5XljrvosIPmlbTlj5HlsITpgJ/luqbvvIwwLjLlgI3moIflh4bpgJ/luqbvvIjms6jvvJrlrZDlvLnpgJ/luqbov4flv6vvvIzlj6/og73kvJrotorov4flnLrmma/kuK3nianlk4HvvIzkuI3lj5HnlJ/norDmkp7vvIHvvIlcclxuICAgICAgICBMYXlhLlZlY3RvcjMuc2NhbGUodGhpcy5zcGVlZFYzLCAwLjA4LCB0aGlzLnNwZWVkVjMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVXBkYXRlKCkge1xyXG4gICAgICAgIC8v5a2Q5by55L2N572u5pu05pawXHJcbiAgICAgICAgdGhpcy5idWxsZXQudHJhbnNmb3JtLnRyYW5zbGF0ZSh0aGlzLnNwZWVkVjMsIGZhbHNlKTtcclxuICAgICAgICAvL+eUn+WRveWRqOacn+mAkuWHj1xyXG4gICAgICAgIHRoaXMubGlmZXRpbWUtLTtcclxuICAgICAgICAvL+eUn+WRveWRqOacn+e7k+adn+WQju+8jOS4gOW4p+WQjumUgOavgeWtkOW8uVxyXG4gICAgICAgIGlmICh0aGlzLmxpZmV0aW1lIDwgMCkge1xyXG4gICAgICAgICAgICBMYXlhLnRpbWVyLmZyYW1lT25jZSgxLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldC5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WFtuS7lueisOaSnuWZqOi/m+WFpee7keWumueJqeS9k+eisOaSnuWZqOaXtuinpuWPke+8iOWtkOW8ueWHu+S4reeJqeWTgeaXtu+8iVxyXG4gICAgICog5rOo77ya5aaC55u45a+556e75Yqo6YCf5bqm6L+H5b+r77yM5Y+v6IO955u05o6l6LaK6L+HXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFbnRlcihvdGhlcjogTGF5YS5QaHlzaWNzQ29tcG9uZW50KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IG90aGVyU3A6IExheWEuTWVzaFNwcml0ZTNEID0gb3RoZXIub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgaWYgKG90aGVyU3AubmFtZSAhPT0gXCJidWxsZXRcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJ1bGxldCB0cmlnZ2VyIGVudGVyOiBcIiArIG90aGVyU3AubmFtZSk7XHJcbiAgICAgICAgICAgIExheWEudGltZXIuZnJhbWVPbmNlKDEsIHRoaXMsIGZ1bmN0aW9uICgpIHsgdGhpcy5idWxsZXQucmVtb3ZlU2VsZigpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIG9uQ29sbGlzaW9uRW50ZXIoY29sbGlzaW9uOiBMYXlhLkNvbGxpc2lvbikge1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b2T5YW25LuW56Kw5pKe5Zmo6L+b5YWl57uR5a6a54mp5L2T56Kw5pKe5Zmo5ZCO6YCQ5bin6Kem5Y+R77yI5a2Q5by56L+b5YWl54mp5ZOB5pe277yJXHJcbiAgICAgKiDms6jvvJrlpoLnm7jlr7nnp7vliqjpgJ/luqbov4flv6vvvIzlj6/og73nm7TmjqXotorov4dcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uVHJpZ2dlclN0YXkob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBvdGhlclNwOiBMYXlhLk1lc2hTcHJpdGUzRCA9IG90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYnVsbGV0IHRyaWdnZXIgc3RheVwiKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG90aGVyU3ApXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOW9k+WFtuS7lueisOaSnuWZqOmAgOWHuue7keWumueJqeS9k+eisOaSnuWZqOaXtumAkOW4p+inpuWPke+8iOWtkOW8ueepv+WHuueJqeWTgeaXtu+8iVxyXG4gICAgICog5rOo77ya5aaC55u45a+556e75Yqo6YCf5bqm6L+H5b+r77yM5Y+v6IO955u05o6l6LaK6L+HXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFeGl0KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgb3RoZXJTcDogTGF5YS5NZXNoU3ByaXRlM0QgPSBvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImJ1bGxldCB0cmlnZ2VyIGV4aXRcIilcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhvdGhlclNwKVxyXG4gICAgICAgIC8v5LiA5bin5ZCO6ZSA5q+B5a2Q5by5XHJcbiAgICAgICAgTGF5YS50aW1lci5mcmFtZU9uY2UoMSwgdGhpcywgZnVuY3Rpb24gKCkgeyB0aGlzLmJ1bGxldC5yZW1vdmVTZWxmKCk7IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBicm9rZW4oKSB7XHJcbiAgICAgICAgdGhpcy5idWxsZXQucmVtb3ZlU2VsZigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5pbXBvcnQgWm9tYmllU2hpZWxkIGZyb20gXCIuL1pvbWJpZVNoaWVsZFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9tYmllIGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcbiAgICBwcml2YXRlIHpvbWJpZTogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICBwcml2YXRlIG1vdmVTdGVwOiBudW1iZXIgPSAwLjAwMTtcclxuXHJcbiAgICBwcml2YXRlIGlzQXR0YWNrZWQ6IEJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKirooqvlh7vpgIDnmoTmoIflh4bpgJ/luqbvvIjmlrnlkJHvvIkqKi9cclxuICAgIHB1YmxpYyByZXBlbGxlZFYzOiBMYXlhLlZlY3RvcjMgPSBuZXcgTGF5YS5WZWN0b3IzKCk7XHJcblxyXG4gICAgcHVibGljIG9yaWdpbl9saWZlOiBudW1iZXIgPSAxMDAwO1xyXG4gICAgcHVibGljIGxpZmU6IG51bWJlcjtcclxuXHJcbiAgICAvKiog56Kw5pKe5qOA5rWL55m95ZCN5Y2VICovXHJcbiAgICBwcml2YXRlIGNvbGxpc2lvbldoaXRlTGlzdDogc3RyaW5nW10gPSBbXCJidWxsZXRcIl07XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkF3YWtlKCkge1xyXG4gICAgICAgIHRoaXMuem9tYmllID0gdGhpcy5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICB0aGlzLmxpZmUgPSB0aGlzLm9yaWdpbl9saWZlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b2T5YW25LuW56Kw5pKe5Zmo6L+b5YWl57uR5a6a54mp5L2T56Kw5pKe5Zmo5pe26Kem5Y+R77yI5a2Q5by55Ye75Lit55uS5a2Q5pe277yJXHJcbiAgICAgKiDms6jvvJrlpoLnm7jlr7nnp7vliqjpgJ/luqbov4flv6vvvIzlj6/og73nm7TmjqXotorov4dcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uVHJpZ2dlckVudGVyKG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgb3RoZXJTcDogTGF5YS5NZXNoU3ByaXRlM0QgPSBvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICBpZiAodGhpcy5jb2xsaXNpb25XaGl0ZUxpc3QuaW5kZXhPZihvdGhlclNwLm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ6b21iaWUgdHJpZ2dlciBlbnRlcjogXCIgKyBvdGhlclNwLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbGV0IHNoaWVsZCA9IHRoaXMub3duZXIucGFyZW50LmdldENoaWxkQXQoMCkuZ2V0Q29tcG9uZW50KFpvbWJpZVNoaWVsZCk7XHJcbiAgICAgICAgICAgIC8vIGlmIChzaGllbGQgJiYgc2hpZWxkLmlzQXR0YWNrZWQpIHtcclxuICAgICAgICAgICAgLy8gICAgIHNoaWVsZC5pc0F0dGFja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBidWxsZXQ6IEJ1bGxldCA9IChvdGhlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRCkuZ2V0Q29tcG9uZW50KEJ1bGxldCkgYXMgQnVsbGV0O1xyXG4gICAgICAgICAgICAvL+iOt+WPluWtkOW8uemAn+W6puS4ulxyXG4gICAgICAgICAgICB0aGlzLnJlcGVsbGVkVjMgPSBidWxsZXQuc3BlZWRWMy5jbG9uZSgpO1xyXG4gICAgICAgICAgICAvL+iiq+aUu+WHu+mAn+W6puW9kuS4gOWMluaIkOWNleS9jeS4gOWQkemHj1xyXG4gICAgICAgICAgICAvLyBMYXlhLlZlY3RvcjMubm9ybWFsaXplKHRoaXMucmVwZWxsZWRWMywgdGhpcy5yZXBlbGxlZFYzKTtcclxuICAgICAgICAgICAgdGhpcy5yZXBlbGxlZFYzLnggLz0gMTA7XHJcbiAgICAgICAgICAgIHRoaXMucmVwZWxsZWRWMy55IC89IDEwO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGVsbGVkVjMueiAvPSAxMDtcclxuICAgICAgICAgICAgLy/orr7nva7kuLrooqvmlLvlh7vnirbmgIFcclxuICAgICAgICAgICAgdGhpcy5pc0F0dGFja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25aIC09IDAuMTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBsaWZlXHJcbiAgICAgICAgICAgIHRoaXMubGlmZSAtPSBidWxsZXQucG93ZXI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiem9tYmllIGxpZmU6IFwiICsgdGhpcy5saWZlICsgXCIvXCIgKyB0aGlzLm9yaWdpbl9saWZlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlmZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInpvbWJpZSBkaWVkXCIpXHJcbiAgICAgICAgICAgICAgICBMYXlhLnRpbWVyLmZyYW1lT25jZSgxLCB0aGlzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b21iaWUucmVtb3ZlU2VsZigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25ZKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Db2xsaXNpb25FbnRlcihjb2xsaXNpb246IExheWEuQ29sbGlzaW9uKSB7XHJcbiAgICAgICAgbGV0IG90aGVyU3A6IExheWEuTWVzaFNwcml0ZTNEID0gY29sbGlzaW9uLm90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbldoaXRlTGlzdC5pbmRleE9mKG90aGVyU3AubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInpvbWJpZSBjb2xsaXNpb24gZW50ZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblRyaWdnZXJTdGF5KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInpvbWJpZSB0cmlnZ2VyIHN0YXlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uVHJpZ2dlckV4aXQob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiem9tYmllIHRyaWdnZXIgZXhpdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpIHtcclxuICAgICAgICAvLyDnjqnlrrbmrbvkuqHliKTmlq0sIOWDteWwuOS4jueOqeWutui3neemu+i/h+i/kVxyXG4gICAgICAgIGlmICh0aGlzLnpvbWJpZS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvblogPiA0LjkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJQbGF5ZXIgZGllZC5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmkYbmraPop5LluqZcclxuICAgICAgICB0aGlzLnpvbWJpZS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWCA9IDA7XHJcbiAgICAgICAgdGhpcy56b21iaWUudHJhbnNmb3JtLmxvY2FsUm90YXRpb25FdWxlclkgPSAwO1xyXG4gICAgICAgIHRoaXMuem9tYmllLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXJaID0gMDtcclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHBvc3Rpb25cclxuICAgICAgICBpZiAoIXRoaXMuaXNBdHRhY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnpvbWJpZS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvblogKz0gdGhpcy5tb3ZlU3RlcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc2V0XHJcbiAgICAgICAgdGhpcy5pc0F0dGFja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuem9tYmllLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uWSA9IC0wLjAxMDAwODYxMDMxNzU2Njk0NlxyXG4gICAgfVxyXG59IiwiaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9tYmllU2hpZWxkIGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcblxyXG4gICAgcHVibGljIHpvbWJpZVNoaWVsZDogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcblxyXG4gICAgcHVibGljIGlzQXR0YWNrZWQ6IEJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgb3JpZ2luX2xpZmU6IG51bWJlciA9IDEwMDtcclxuICAgIHB1YmxpYyBsaWZlOiBudW1iZXI7XHJcblxyXG4gICAgLyoqIOeisOaSnuajgOa1i+eZveWQjeWNlSAqL1xyXG4gICAgcHJpdmF0ZSBjb2xsaXNpb25XaGl0ZUxpc3Q6IHN0cmluZ1tdID0gW1wiYnVsbGV0XCJdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Bd2FrZSgpIHtcclxuICAgICAgICB0aGlzLnpvbWJpZVNoaWVsZCA9IHRoaXMub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgdGhpcy5saWZlID0gdGhpcy5vcmlnaW5fbGlmZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25UcmlnZ2VyRW50ZXIob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBvdGhlclNwOiBMYXlhLk1lc2hTcHJpdGUzRCA9IG90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbldoaXRlTGlzdC5pbmRleE9mKG90aGVyU3AubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCB0cmlnZ2VyIGVudGVyOiBcIiArIG90aGVyU3AubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgYnVsbGV0OiBCdWxsZXQgPSAob3RoZXIub3duZXIgYXMgTGF5YS5NZXNoU3ByaXRlM0QpLmdldENvbXBvbmVudChCdWxsZXQpIGFzIEJ1bGxldDtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGxpZmVcclxuICAgICAgICAgICAgdGhpcy5saWZlIC09IGJ1bGxldC5wb3dlcjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzaGllbGQgbGlmZTogXCIgKyB0aGlzLmxpZmUgKyBcIi9cIiArIHRoaXMub3JpZ2luX2xpZmUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pc0F0dGFja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGlmZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCBib3JrZW5cIilcclxuICAgICAgICAgICAgICAgIExheWEudGltZXIuZnJhbWVPbmNlKDEsIHRoaXMsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwbGF5IHNoaWVsZCBicm9rZW4gZWZmZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b21iaWVTaGllbGQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnVsbGV0LmJyb2tlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Db2xsaXNpb25FbnRlcihjb2xsaXNpb246IExheWEuQ29sbGlzaW9uKSB7XHJcbiAgICAgICAgbGV0IG90aGVyU3A6IExheWEuTWVzaFNwcml0ZTNEID0gY29sbGlzaW9uLm90aGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbGxpc2lvbldoaXRlTGlzdC5pbmRleE9mKG90aGVyU3AubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNoaWVsZCBjb2xsaXNpb24gZW50ZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblRyaWdnZXJTdGF5KG90aGVyOiBMYXlhLlBoeXNpY3NDb21wb25lbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNoaWVsZCB0cmlnZ2VyIHN0YXlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uVHJpZ2dlckV4aXQob3RoZXI6IExheWEuUGh5c2ljc0NvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2hpZWxkIHRyaWdnZXIgZXhpdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZSgpIHtcclxuICAgICAgICAvLyBsZXQgem9tYmllQ29sbGlkZXI6IExheWEuUGh5c2ljc0NvbGxpZGVyID0gdGhpcy56b21iaWVTaGllbGQuZ2V0Q29tcG9uZW50KExheWEuUGh5c2ljc0NvbGxpZGVyKTtcclxuICAgICAgICAvLyB6b21iaWVDb2xsaWRlci5cclxuICAgIH1cclxufSIsImltcG9ydCB7IHVpIH0gZnJvbSBcIi4vLi4vLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCAqIGFzIENvbnN0IGZyb20gXCIuLi9Db25zdFwiO1xyXG5pbXBvcnQgWm9tYmllIGZyb20gXCIuLi9jb21wb25lbnQvWm9tYmllXCI7XHJcbmltcG9ydCBab21iaWVTaGllbGQgZnJvbSBcIi4uL2NvbXBvbmVudC9ab21iaWVTaGllbGRcIjtcclxuaW1wb3J0IEJ1bGxldCBmcm9tIFwiLi4vY29tcG9uZW50L0J1bGxldFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVVJIGV4dGVuZHMgdWkudGVzdC5UZXN0U2NlbmVVSSB7XHJcbiAgICBwcml2YXRlIHNjZW5lM0Q6IExheWEuU2NlbmUzRDtcclxuXHJcbiAgICBwcml2YXRlIGNhbWVyYTogTGF5YS5DYW1lcmE7XHJcblxyXG4gICAgLyoqIGdhbWUgc2NlbmUgKi9cclxuICAgIHByaXZhdGUgZ3JvdW5kOiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIHByaXZhdGUgZ2FtZXNjZW5lOiBMYXlhLk1lc2hTcHJpdGUzRDtcclxuXHJcbiAgICAvKiogYnVsbGV0ICovXHJcbiAgICBwcml2YXRlIF9idWxsZXQ6IExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHJpdmF0ZSBidWxsZXRSYWRpdXM6IG51bWJlciA9IDAuMDI7XHJcbiAgICBwcml2YXRlIGJ1bGxldFZlbG9jaXR5OiBudW1iZXIgPSAwLjU7XHJcbiAgICBwcml2YXRlIGJ1bGxldF9vcmlnaW46IExheWEuVmVjdG9yMztcclxuXHJcbiAgICAvKiogem9tYmllICovXHJcbiAgICBwcml2YXRlIF96b21iaWU6IExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHJpdmF0ZSB6b21uYmllQW5pOiBMYXlhLkFuaW1hdG9yO1xyXG4gICAgcHJpdmF0ZSB6b21iaWVJZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKiogcGxheWVyICovXHJcbiAgICBwcml2YXRlIHBsYXllcjogTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICBwcml2YXRlIHBsYXllckFuaTogTGF5YS5BbmltYXRvcjtcclxuICAgIHByaXZhdGUgc2hvb3RUaW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFNjZW5lM0QoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0R3JvdW5kKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFpvbWJpZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRCdWxsZXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0UGxheWVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGludGlhbGl6ZSBzY2VuZSAqL1xyXG4gICAgcHJpdmF0ZSBpbml0U2NlbmUzRCgpIHtcclxuICAgICAgICAvLyBhZGQgc2NlbmVcclxuICAgICAgICB0aGlzLnNjZW5lM0QgPSBMYXlhLnN0YWdlLmFkZENoaWxkKG5ldyBMYXlhLlNjZW5lM0QoKSkgYXMgTGF5YS5TY2VuZTNEO1xyXG5cclxuICAgICAgICAvLyBhZGQgY2FtZXJhXHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSAodGhpcy5zY2VuZTNELmFkZENoaWxkKG5ldyBMYXlhLkNhbWVyYSgwLCAwLjEsIDEwMCkpKSBhcyBMYXlhLkNhbWVyYTtcclxuICAgICAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvbiA9IENvbnN0LkNhbWVyYUluaXRQb3MuY2xvbmUoKTtcclxuICAgICAgICB0aGlzLmNhbWVyYS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyID0gQ29uc3QuQ2FtZXJhSW5pdFJvdC5jbG9uZSgpO1xyXG5cclxuICAgICAgICAvLyBhZGQgZGlyZWN0aW9uIGxpZ2h0XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbkxpZ2h0OiBMYXlhLkRpcmVjdGlvbkxpZ2h0ID0gdGhpcy5zY2VuZTNELmFkZENoaWxkKG5ldyBMYXlhLkRpcmVjdGlvbkxpZ2h0KCkpIGFzIExheWEuRGlyZWN0aW9uTGlnaHQ7XHJcbiAgICAgICAgZGlyZWN0aW9uTGlnaHQuY29sb3IgPSBuZXcgTGF5YS5WZWN0b3IzKDAuNiwgMC42LCAwLjYpO1xyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXIgPSBuZXcgTGF5YS5WZWN0b3IzKC00NSwgMCwgMCk7XHJcblxyXG4gICAgICAgIC8vIGxvYWQgZ2FtZSBzY2VuZVxyXG4gICAgICAgIC8vIExheWEuU3ByaXRlM0QubG9hZChcInJlcy9zY2VuZS5saFwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIChyZXMpID0+IHtcclxuICAgICAgICAvLyAgICAgdGhpcy5nYW1lc2NlbmUgPSB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQocmVzKSBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICAvLyAgICAgdGhpcy5nYW1lc2NlbmUubmFtZSA9IFwiZ2FtZV9zY2VuZVwiO1xyXG4gICAgICAgIC8vIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSBwbGF5ZXIgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0UGxheWVyKCkge1xyXG4gICAgICAgIExheWEuU3ByaXRlM0QubG9hZChDb25zdC5QbGF5ZXJSZXNVcmwsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKHJlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllciA9IHJlcztcclxuICAgICAgICAgICAgdGhpcy5zY2VuZTNELmFkZENoaWxkKHRoaXMucGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmkgPSB0aGlzLnBsYXllci5nZXRDb21wb25lbnQoTGF5YS5BbmltYXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uID0gQ29uc3QuUGxheWVySW5pdFBvcy5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyID0gQ29uc3QuUGxheWVySW5pdFJvdC5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllci50cmFuc2Zvcm0ubG9jYWxTY2FsZSA9IENvbnN0LlBsYXllckluaXRTY2FsZS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIubmFtZSA9IFwicGxheWVyXCI7XHJcblxyXG4gICAgICAgICAgICAvLyBtb3VzZSBjbGljayBldmVudCBsaXN0ZW46IHNob290IGEgYnVsbGV0XHJcbiAgICAgICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5vbkNsaWNrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG9uVXBkYXRlXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEdhbWVTdGFnZSgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSB6b21iaWUgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0Wm9tYmllKCkge1xyXG4gICAgICAgIExheWEuU3ByaXRlM0QubG9hZChcInJlcy96b21iaWVfcG9saWNlLmxoXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKHJlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl96b21iaWUgPSByZXM7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuem9tbmJpZUFuaSA9IHRoaXMuX3pvbWJpZS5nZXRDb21wb25lbnQoTGF5YS5BbmltYXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3pvbWJpZS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWCArPSA5MDtcclxuICAgICAgICAgICAgdGhpcy5fem9tYmllLnRyYW5zZm9ybS5sb2NhbFNjYWxlID0gQ29uc3QuUGxheWVySW5pdFNjYWxlLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl96b21iaWUubmFtZSA9IFwiX3pvbWJpZVwiO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogaW5pdGlhbGl6ZSBidWxsZXQgbWVzaCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0QnVsbGV0KCkge1xyXG4gICAgICAgIHRoaXMuX2J1bGxldCA9IG5ldyBMYXlhLk1lc2hTcHJpdGUzRChMYXlhLlByaW1pdGl2ZU1lc2guY3JlYXRlU3BoZXJlKHRoaXMuYnVsbGV0UmFkaXVzKSk7XHJcbiAgICAgICAgbGV0IG1hdDogTGF5YS5CbGlublBob25nTWF0ZXJpYWwgPSBuZXcgTGF5YS5CbGlublBob25nTWF0ZXJpYWwoKTtcclxuICAgICAgICBtYXQuYWxiZWRvQ29sb3IgPSBuZXcgTGF5YS5WZWN0b3I0KDEsIDAsIDAsIDEpO1xyXG4gICAgICAgIHRoaXMuX2J1bGxldC5tZXNoUmVuZGVyZXIubWF0ZXJpYWwgPSBtYXQ7XHJcbiAgICAgICAgLy8gYWRkIGNvbGxpZGVyXHJcbiAgICAgICAgbGV0IGJ1bGxldENvbGxpZGVyOiBMYXlhLlBoeXNpY3NDb2xsaWRlciA9IHRoaXMuX2J1bGxldC5hZGRDb21wb25lbnQoTGF5YS5QaHlzaWNzQ29sbGlkZXIpO1xyXG4gICAgICAgIGxldCBidWxsZXRDb2xsaWRlclNoYXBlOiBMYXlhLk1lc2hDb2xsaWRlclNoYXBlID0gbmV3IExheWEuTWVzaENvbGxpZGVyU2hhcGUoKTtcclxuICAgICAgICBidWxsZXRDb2xsaWRlclNoYXBlLm1lc2ggPSB0aGlzLl9idWxsZXQubWVzaEZpbHRlci5zaGFyZWRNZXNoO1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmNvbGxpZGVyU2hhcGUgPSBidWxsZXRDb2xsaWRlclNoYXBlO1xyXG4gICAgICAgIC8vIOW/q+mAn+enu+WKqOeJqeS9k+i/nue7reajgOa1i1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmNjZE1vdGlvblRocmVzaG9sZCA9IDAuMDAwMTtcclxuICAgICAgICBidWxsZXRDb2xsaWRlci5jY2RTd2VwdFNwaGVyZVJhZGl1cyA9IHRoaXMuYnVsbGV0UmFkaXVzO1xyXG4gICAgICAgIGJ1bGxldENvbGxpZGVyLmlzVHJpZ2dlciA9IHRydWU7XHJcbiAgICAgICAgLy8gbGV0IGJ1bGxldFJpZ2lkOiBMYXlhLlJpZ2lkYm9keTNEID0gdGhpcy5fYnVsbGV0LmFkZENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKTtcclxuICAgICAgICAvLyBidWxsZXRSaWdpZC5jb2xsaWRlclNoYXBlID0gbmV3IExheWEuU3BoZXJlQ29sbGlkZXJTaGFwZSgwLjAyKTtcclxuICAgICAgICAvLyBidWxsZXRSaWdpZC5ncmF2aXR5ID0gbmV3IExheWEuVmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAvLyBzZXQgYnVsbGV0cycgb3JpZ2luYWwgcG9pbnRcclxuICAgICAgICB0aGlzLmJ1bGxldF9vcmlnaW4gPSBuZXcgTGF5YS5WZWN0b3IzKDAsIDAsIDEpO1xyXG5cclxuICAgICAgICB0aGlzLl9idWxsZXQubmFtZSA9IFwiX2J1bGxldFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBpbml0aWFsaXplIGdyb3VuZCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0R3JvdW5kKCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdW5kID0gbmV3IExheWEuTWVzaFNwcml0ZTNEKExheWEuUHJpbWl0aXZlTWVzaC5jcmVhdGVQbGFuZSgyMCwgMjApKTtcclxuICAgICAgICB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQodGhpcy5ncm91bmQpO1xyXG4gICAgICAgIGxldCBncm91bmRDb2xsaWRlcjogTGF5YS5SaWdpZGJvZHkzRCA9IHRoaXMuZ3JvdW5kLmFkZENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKTtcclxuICAgICAgICBsZXQgZ3JvdW5kQ29sbGlkZXJTaGFwZTogTGF5YS5NZXNoQ29sbGlkZXJTaGFwZSA9IG5ldyBMYXlhLk1lc2hDb2xsaWRlclNoYXBlKCk7XHJcbiAgICAgICAgZ3JvdW5kQ29sbGlkZXJTaGFwZS5tZXNoID0gdGhpcy5ncm91bmQubWVzaEZpbHRlci5zaGFyZWRNZXNoO1xyXG4gICAgICAgIGdyb3VuZENvbGxpZGVyLmNvbGxpZGVyU2hhcGUgPSBncm91bmRDb2xsaWRlclNoYXBlO1xyXG4gICAgICAgIGdyb3VuZENvbGxpZGVyLmlzS2luZW1hdGljID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5ncm91bmQubmFtZSA9IFwiZ3JvdW5kXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGluaXQgZ2FtZSBzdGFnZTogem9tYmllICovXHJcbiAgICBwcml2YXRlIGluaXRHYW1lU3RhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy56b21iaWVJZCA9IDA7XHJcbiAgICAgICAgbGV0IGNudCA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g6K6+572u546p5a625bCE5Ye75Yqo5L2c5b6q546v5pKt5pS+XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJBbmkuZ2V0RGVmYXVsdFN0YXRlKCkuY2xpcC5pc2xvb3BpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGxheWVyQW5pLnBsYXkoKTtcclxuICAgICAgICBMYXlhLnRpbWVyLmZyYW1lTG9vcCgxLCB0aGlzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB6b21iaWVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl96b21iaWUgJiYgY250KysgJSA2MCA9PT0gMCAmJiB0aGlzLnpvbWJpZUlkIDwgMTApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlWm9tYmllKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnpvbWJpZUlkKys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHBsYXkgc2hvb3RpbmcgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuc2hvb3RUaW1lLS07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob290VGltZSA8IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgcGxheWluZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmkuc3BlZWQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIGNyZWF0ZSBhIHpvbWJpZSAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVab21iaWUoKSB7XHJcbiAgICAgICAgbGV0IHpvbWJpZTogTGF5YS5NZXNoU3ByaXRlM0QgPSB0aGlzLl96b21iaWUuY2xvbmUoKTtcclxuICAgICAgICB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQoem9tYmllKTtcclxuICAgICAgICB6b21iaWUuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRib2R5M0QpLmlzS2luZW1hdGljID0gZmFsc2U7XHJcbiAgICAgICAgem9tYmllLmdldENoaWxkQXQoMCkuZ2V0Q29tcG9uZW50KExheWEuUmlnaWRib2R5M0QpLmlzS2luZW1hdGljID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGFkZCB6b21iaWUgYm9keSBzY3JpcHRcclxuICAgICAgICB6b21iaWUuYWRkQ29tcG9uZW50KFpvbWJpZSk7XHJcbiAgICAgICAgLy8gYWRkIHpvbWJpZSBzaGllbGQgc2NyaXB0XHJcbiAgICAgICAgem9tYmllLmdldENoaWxkQXQoMCkuYWRkQ29tcG9uZW50KFpvbWJpZVNoaWVsZCk7XHJcblxyXG4gICAgICAgIHpvbWJpZS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvblggKz0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMjtcclxuXHJcbiAgICAgICAgem9tYmllLm5hbWUgPSBcInpvbWJpZV9cIiArIHRoaXMuem9tYmllSWQ7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibmV3IHpvbWJpZTogXCIgKyB6b21iaWUubmFtZSk7XHJcblxyXG4gICAgICAgIC8vIGxldCB6b21iaWUxOiBMYXlhLk1lc2hTcHJpdGUzRCA9IHRoaXMuX3pvbWJpZS5jbG9uZSgpO1xyXG4gICAgICAgIC8vIHRoaXMuc2NlbmUzRC5hZGRDaGlsZCh6b21iaWUxKTtcclxuICAgICAgICAvLyB6b21iaWUxLmdldENvbXBvbmVudChMYXlhLlJpZ2lkYm9keTNEKS5pc0tpbmVtYXRpYyA9IHRydWU7XHJcbiAgICAgICAgLy8gem9tYmllMS5hZGRDb21wb25lbnQoWm9tYmllKTtcclxuICAgICAgICAvLyB6b21iaWUxLmdldENoaWxkQXQoMCkuYWRkQ29tcG9uZW50KFpvbWJpZVNoaWVsZCk7XHJcbiAgICAgICAgLy8gem9tYmllMS50cmFuc2Zvcm0ubG9jYWxQb3NpdGlvblggKz0gMC41O1xyXG4gICAgICAgIC8vIHpvbWJpZTEudHJhbnNmb3JtLmxvY2FsUm90YXRpb25FdWxlclkgKz0gOTA7XHJcbiAgICAgICAgLy8gem9tYmllMS5uYW1lID0gXCJ6b21iaWVfMVwiO1xyXG5cclxuICAgICAgICAvLyBsZXQgem9tYmllMjogTGF5YS5NZXNoU3ByaXRlM0QgPSB0aGlzLl96b21iaWUuY2xvbmUoKTtcclxuICAgICAgICAvLyB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQoem9tYmllMik7XHJcbiAgICAgICAgLy8gem9tYmllMi5nZXRDb21wb25lbnQoTGF5YS5SaWdpZGJvZHkzRCkuaXNLaW5lbWF0aWMgPSB0cnVlO1xyXG4gICAgICAgIC8vIHpvbWJpZTIuYWRkQ29tcG9uZW50KFpvbWJpZSk7XHJcbiAgICAgICAgLy8gem9tYmllMi5nZXRDaGlsZEF0KDApLmFkZENvbXBvbmVudChab21iaWVTaGllbGQpO1xyXG4gICAgICAgIC8vIHpvbWJpZTIudHJhbnNmb3JtLmxvY2FsUG9zaXRpb25YIC09IDAuNTtcclxuICAgICAgICAvLyB6b21iaWUyLnRyYW5zZm9ybS5sb2NhbFBvc2l0aW9uWSArPSAwLjI7XHJcbiAgICAgICAgLy8gem9tYmllMi50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbkV1bGVyWCArPSA5MDtcclxuICAgICAgICAvLyB6b21iaWUyLm5hbWUgPSBcInpvbWJpZV8yXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIG1vdXNlIGNsaWNrIGV2ZW50OiBzaG9vdCBhIGJ1bGxldCAqL1xyXG4gICAgcHJpdmF0ZSBvbkNsaWNrKCkge1xyXG4gICAgICAgIC8vIHBsYXkgc2hvb3QgYW5pbWF0aW9uXHJcbiAgICAgICAgdGhpcy5zaG9vdFRpbWUgPSBDb25zdC5QbGF5ZXJTaG9vdExpZmVUaW1lO1xyXG4gICAgICAgIHRoaXMucGxheWVyQW5pLnNwZWVkID0gMTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IHJheVxyXG4gICAgICAgIGxldCBwb2ludDogTGF5YS5WZWN0b3IyID0gbmV3IExheWEuVmVjdG9yMigpO1xyXG4gICAgICAgIHBvaW50LnggPSBMYXlhLk1vdXNlTWFuYWdlci5pbnN0YW5jZS5tb3VzZVg7XHJcbiAgICAgICAgcG9pbnQueSA9IExheWEuTW91c2VNYW5hZ2VyLmluc3RhbmNlLm1vdXNlWTtcclxuICAgICAgICBsZXQgcmF5OiBMYXlhLlJheSA9IG5ldyBMYXlhLlJheShuZXcgTGF5YS5WZWN0b3IzKDAsIDAsIDApLCBuZXcgTGF5YS5WZWN0b3IzKDAsIDAsIDApKTtcclxuICAgICAgICB0aGlzLmNhbWVyYS52aWV3cG9ydFBvaW50VG9SYXkocG9pbnQsIHJheSk7XHJcblxyXG4gICAgICAgIC8vIHJheWNhc3QgZGV0ZWN0aW9uXHJcbiAgICAgICAgbGV0IGhpdFJlc3VsdDogTGF5YS5IaXRSZXN1bHRbXSA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNjZW5lM0QucGh5c2ljc1NpbXVsYXRpb24ucmF5Q2FzdEFsbChyYXksIGhpdFJlc3VsdCwgMzApKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgaGl0UmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtLmNvbGxpZGVyLm93bmVyLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnZW5lcmF0ZSBidWxsZXRcclxuICAgICAgICBsZXQgYnVsbGV0OiBMYXlhLk1lc2hTcHJpdGUzRCA9IHRoaXMuX2J1bGxldC5jbG9uZSgpO1xyXG4gICAgICAgIGJ1bGxldC5uYW1lID0gXCJidWxsZXRcIjtcclxuICAgICAgICB0aGlzLnNjZW5lM0QuYWRkQ2hpbGQoYnVsbGV0KTtcclxuICAgICAgICBsZXQgYnVsbGV0U2NyaXB0ID0gYnVsbGV0LmFkZENvbXBvbmVudChCdWxsZXQpO1xyXG4gICAgICAgIGJ1bGxldFNjcmlwdC5zZXREaXJlY3Rpb24ocmF5Lm9yaWdpbiwgcmF5LmRpcmVjdGlvbik7XHJcbiAgICB9XHJcbn0iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XG52YXIgUkVHOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcbmV4cG9ydCBtb2R1bGUgdWkudGVzdCB7XHJcbiAgICBleHBvcnQgY2xhc3MgVGVzdFNjZW5lVUkgZXh0ZW5kcyBTY2VuZSB7XHJcblx0XHRwdWJsaWMgYnRuOkxheWEuQnV0dG9uO1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwidGVzdC9UZXN0U2NlbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkudGVzdC5UZXN0U2NlbmVVSVwiLFRlc3RTY2VuZVVJKTtcclxufVxyIl19
