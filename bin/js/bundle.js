var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/runtime/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameUI":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 0.5, 5);
exports.CameraInitRot = new Laya.Vector3(-5, 0, 0);
/** player */
exports.PlayerResUrl = "res/human.lh";
exports.PlayerInitPos = new Laya.Vector3(-0.05, 0, 4.3);
exports.PlayerInitRot = new Laya.Vector3(90, 160, 0);
exports.PlayerInitScale = new Laya.Vector3(20, 20, 20);
exports.PlayerShootLifeTime = 10;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BulletScript = /** @class */ (function (_super) {
    __extends(BulletScript, _super);
    function BulletScript() {
        var _this = _super.call(this) || this;
        /**子弹生命周期**/
        _this.lifetime = 180;
        /**子弹发射的速度（方向）**/
        _this.speedV3 = new Laya.Vector3();
        _this.power = 10;
        return _this;
    }
    BulletScript.prototype.onAwake = function () {
        this.bullet = this.owner;
    };
    /** 设置子弹射击方向并计算速度 */
    BulletScript.prototype.setDirection = function (origin, direction) {
        /****
         * 注：
         * 三维向量即是位置、方向，也可以是速度，但速度需要一个统一的参考衡量标准，比如“N*标准速度值/帧”或
         * “N*标准速度值/毫秒”，它类似于“N*米/帧”。
         * 而我们得到的方向向量，它的大小不一，无法作为标准速度值使用，这个时候可用Vector3.normalize()方法
         * 把任一向量归一化，产生单位为一的向量作为标准速度值，再把它进行缩放作为不同物体的速度来使用，比如
         * 0.2倍标准速度值，1.5倍标准速度值等，可使用Vector3.scale()方法缩放。
         ****/
        // 设置初始位置
        this.bullet.transform.localPosition = origin.clone();
        //将方向向量归一成单位为一的方向速度向量(在LayaAir中相当于1米的长度)
        Laya.Vector3.normalize(direction, this.speedV3);
        //用缩放方法去调整发射速度，0.2倍标准速度（注：子弹速度过快，可能会越过场景中物品，不发生碰撞！）
        Laya.Vector3.scale(this.speedV3, 0.08, this.speedV3);
    };
    BulletScript.prototype.onUpdate = function () {
        var _this = this;
        //子弹位置更新
        this.bullet.transform.translate(this.speedV3, false);
        //生命周期递减
        this.lifetime--;
        //生命周期结束后，一帧后销毁子弹
        if (this.lifetime < 0) {
            Laya.timer.frameOnce(1, this, function () {
                _this.bullet.removeSelf();
            });
        }
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (otherSp.name !== "bullet") {
            console.log("bullet trigger enter: " + otherSp.name);
            Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
        }
    };
    // public onCollisionEnter(collision: Laya.Collision) {
    // }
    /**
     * 当其他碰撞器进入绑定物体碰撞器后逐帧触发（子弹进入物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerStay = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger stay")
        // console.log(otherSp)
    };
    /**
     * 当其他碰撞器退出绑定物体碰撞器时逐帧触发（子弹穿出物品时）
     * 注：如相对移动速度过快，可能直接越过
     */
    BulletScript.prototype.onTriggerExit = function (other) {
        var otherSp = other.owner;
        // console.log("bullet trigger exit")
        // console.log(otherSp)
        //一帧后销毁子弹
        Laya.timer.frameOnce(1, this, function () { this.bullet.removeSelf(); });
    };
    BulletScript.prototype.broken = function () {
        this.bullet.removeSelf();
    };
    return BulletScript;
}(Laya.Script3D));
exports.default = BulletScript;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var Zombie = /** @class */ (function (_super) {
    __extends(Zombie, _super);
    function Zombie() {
        var _this = _super.call(this) || this;
        _this.moveStep = 0.001;
        _this.isAttacked = false;
        /**被击退的标准速度（方向）**/
        _this.repelledV3 = new Laya.Vector3();
        _this.origin_life = 1000;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    Zombie.prototype.onAwake = function () {
        this.zombie = this.owner;
        this.life = this.origin_life;
    };
    /**
     * 当其他碰撞器进入绑定物体碰撞器时触发（子弹击中盒子时）
     * 注：如相对移动速度过快，可能直接越过
     */
    Zombie.prototype.onTriggerEnter = function (other) {
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie trigger enter: " + otherSp.name);
            // let shield = this.owner.parent.getChildAt(0).getComponent(ZombieShield);
            // if (shield && shield.isAttacked) {
            //     shield.isAttacked = false;
            //     return;
            // }
            var bullet = other.owner.getComponent(Bullet_1.default);
            //获取子弹速度为
            this.repelledV3 = bullet.speedV3.clone();
            //被攻击速度归一化成单位一向量
            // Laya.Vector3.normalize(this.repelledV3, this.repelledV3);
            this.repelledV3.x /= 10;
            this.repelledV3.y /= 10;
            this.repelledV3.z /= 10;
            //设置为被攻击状态
            this.isAttacked = true;
            this.zombie.transform.localPositionZ -= 0.1;
            // update life
            this.life -= bullet.power;
            console.log("zombie life: " + this.life + "/" + this.origin_life);
            if (this.life <= 0) {
                console.log("zombie died");
                Laya.timer.frameOnce(1, this, function () {
                    this.zombie.removeSelf();
                });
            }
        }
    };
    Zombie.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("zombie collision enter");
        }
    };
    Zombie.prototype.onTriggerStay = function (other) {
        // console.log("zombie trigger stay");
    };
    Zombie.prototype.onTriggerExit = function (other) {
        // console.log("zombie trigger exit");
    };
    Zombie.prototype.onUpdate = function () {
        // 玩家死亡判断, 僵尸与玩家距离过近
        if (this.zombie.transform.localPositionZ > 4.9) {
            console.log("Player died.");
        }
        // 摆正角度
        this.zombie.transform.localRotationEulerX = 0;
        this.zombie.transform.localRotationEulerY = 0;
        this.zombie.transform.localRotationEulerZ = 0;
        // update postion
        if (!this.isAttacked) {
            this.zombie.transform.localPositionZ += this.moveStep;
        }
        // reset
        this.isAttacked = false;
    };
    return Zombie;
}(Laya.Script3D));
exports.default = Zombie;
},{"../component/Bullet":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bullet_1 = require("../component/Bullet");
var ZombieShield = /** @class */ (function (_super) {
    __extends(ZombieShield, _super);
    function ZombieShield() {
        var _this = _super.call(this) || this;
        _this.isAttacked = false;
        _this.origin_life = 100;
        /** 碰撞检测白名单 */
        _this.collisionWhiteList = ["bullet"];
        return _this;
    }
    ZombieShield.prototype.onAwake = function () {
        this.zombieShield = this.owner;
        this.life = this.origin_life;
    };
    ZombieShield.prototype.onTriggerEnter = function (other) {
        var _this = this;
        var otherSp = other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield trigger enter: " + otherSp.name);
            var bullet = other.owner.getComponent(Bullet_1.default);
            // update life
            this.life -= bullet.power;
            console.log("shield life: " + this.life + "/" + this.origin_life);
            this.isAttacked = true;
            if (this.life <= 0) {
                console.log("shield borken");
                Laya.timer.frameOnce(1, this, function () {
                    // play shield broken effect
                    _this.zombieShield.active = false;
                });
            }
            bullet.broken();
        }
    };
    ZombieShield.prototype.onCollisionEnter = function (collision) {
        var otherSp = collision.other.owner;
        if (this.collisionWhiteList.indexOf(otherSp.name) >= 0) {
            console.log("shield collision enter");
        }
    };
    ZombieShield.prototype.onTriggerStay = function (other) {
        // console.log("shield trigger stay");
    };
    ZombieShield.prototype.onTriggerExit = function (other) {
        // console.log("shield trigger exit");
    };
    ZombieShield.prototype.onUpdate = function () {
        // let zombieCollider: Laya.PhysicsCollider = this.zombieShield.getComponent(Laya.PhysicsCollider);
        // zombieCollider.
    };
    return ZombieShield;
}(Laya.Script3D));
exports.default = ZombieShield;
},{"../component/Bullet":4}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Zombie_1 = require("../component/Zombie");
var ZombieShield_1 = require("../component/ZombieShield");
var Bullet_1 = require("../component/Bullet");
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        _this.bulletRadius = 0.02;
        _this.bulletVelocity = 0.5;
        _this.zombieId = 0;
        _this.shootTime = 0;
        _this.initScene3D();
        _this.initGround();
        _this.initZombie();
        _this.initBullet();
        _this.initPlayer();
        return _this;
    }
    /** intialize scene */
    GameUI.prototype.initScene3D = function () {
        // add scene
        this.scene3D = Laya.stage.addChild(new Laya.Scene3D());
        // add camera
        this.camera = (this.scene3D.addChild(new Laya.Camera(0, 0.1, 100)));
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRot.clone();
        // add direction light
        var directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.localRotationEuler = new Laya.Vector3(-45, 0, 0);
        // load game scene
        // Laya.Sprite3D.load("res/scene.lh", Laya.Handler.create(this, (res) => {
        //     this.gamescene = this.scene3D.addChild(res) as Laya.MeshSprite3D;
        //     this.gamescene.name = "game_scene";
        // }));
    };
    /** initialize player mesh */
    GameUI.prototype.initPlayer = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.PlayerResUrl, Laya.Handler.create(this, function (res) {
            _this.player = res;
            _this.scene3D.addChild(_this.player);
            _this.playerAni = _this.player.getComponent(Laya.Animator);
            _this.player.transform.localPosition = Const.PlayerInitPos.clone();
            _this.player.transform.localRotationEuler = Const.PlayerInitRot.clone();
            _this.player.transform.localScale = Const.PlayerInitScale.clone();
            _this.player.name = "player";
            // mouse click event listen: shoot a bullet
            Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
            // onUpdate
            _this.initGameStage();
        }));
    };
    /** initialize zombie mesh */
    GameUI.prototype.initZombie = function () {
        var _this = this;
        Laya.Sprite3D.load("res/zombie_police.lh", Laya.Handler.create(this, function (res) {
            _this._zombie = res;
            // this.zomnbieAni = this._zombie.getComponent(Laya.Animator);
            _this._zombie.transform.localRotationEulerX += 90;
            _this._zombie.transform.localScale = Const.PlayerInitScale.clone();
            _this._zombie.name = "_zombie";
        }));
    };
    /** initialize bullet mesh */
    GameUI.prototype.initBullet = function () {
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(this.bulletRadius));
        var mat = new Laya.BlinnPhongMaterial();
        mat.albedoColor = new Laya.Vector4(1, 0, 0, 1);
        this._bullet.meshRenderer.material = mat;
        // add collider
        var bulletCollider = this._bullet.addComponent(Laya.PhysicsCollider);
        var bulletColliderShape = new Laya.MeshColliderShape();
        bulletColliderShape.mesh = this._bullet.meshFilter.sharedMesh;
        bulletCollider.colliderShape = bulletColliderShape;
        // 快速移动物体连续检测
        bulletCollider.ccdMotionThreshold = 0.0001;
        bulletCollider.ccdSweptSphereRadius = this.bulletRadius;
        bulletCollider.isTrigger = true;
        // let bulletRigid: Laya.Rigidbody3D = this._bullet.addComponent(Laya.Rigidbody3D);
        // bulletRigid.colliderShape = new Laya.SphereColliderShape(0.02);
        // bulletRigid.gravity = new Laya.Vector3(0, 0, 0);
        // set bullets' original point
        this.bullet_origin = new Laya.Vector3(0, 0, 1);
        this._bullet.name = "_bullet";
    };
    /** initialize ground */
    GameUI.prototype.initGround = function () {
        this.ground = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(20, 20));
        this.scene3D.addChild(this.ground);
        var groundCollider = this.ground.addComponent(Laya.Rigidbody3D);
        var groundColliderShape = new Laya.MeshColliderShape();
        groundColliderShape.mesh = this.ground.meshFilter.sharedMesh;
        groundCollider.colliderShape = groundColliderShape;
        groundCollider.isKinematic = true;
        this.ground.name = "ground";
    };
    /** init game stage: zombie */
    GameUI.prototype.initGameStage = function () {
        var _this = this;
        this.zombieId = 0;
        var cnt = 0;
        // 设置玩家射击动作循环播放
        this.playerAni.getDefaultState().clip.islooping = true;
        this.playerAni.play();
        Laya.timer.frameLoop(1, this, function () {
            // create zombies
            // if (this._zombie && cnt++ % 60 === 0 && this.zombieId < 10) {
            //     this.createZombie();
            //     this.zombieId++;
            // }
            // play shooting animation
            _this.shootTime--;
            if (_this.shootTime < 0) {
                // stop playing
                _this.playerAni.speed = 0;
            }
        });
    };
    /** create a zombie */
    GameUI.prototype.createZombie = function () {
        var zombie = this._zombie.clone();
        this.scene3D.addChild(zombie);
        zombie.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // add zombie body script
        zombie.addComponent(Zombie_1.default);
        // add zombie shield script
        zombie.getChildAt(0).addComponent(ZombieShield_1.default);
        zombie.transform.localPositionX += (Math.random() - 0.5) * 2;
        zombie.name = "zombie_" + this.zombieId;
        console.log("new zombie: " + zombie.name);
        // let zombie1: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie1);
        // zombie1.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie1.addComponent(Zombie);
        // zombie1.getChildAt(0).addComponent(ZombieShield);
        // zombie1.transform.localPositionX += 0.5;
        // zombie1.transform.localRotationEulerY += 90;
        // zombie1.name = "zombie_1";
        // let zombie2: Laya.MeshSprite3D = this._zombie.clone();
        // this.scene3D.addChild(zombie2);
        // zombie2.getComponent(Laya.Rigidbody3D).isKinematic = true;
        // zombie2.addComponent(Zombie);
        // zombie2.getChildAt(0).addComponent(ZombieShield);
        // zombie2.transform.localPositionX -= 0.5;
        // zombie2.transform.localPositionY += 0.2;
        // zombie2.transform.localRotationEulerX += 90;
        // zombie2.name = "zombie_2";
    };
    /** mouse click event: shoot a bullet */
    GameUI.prototype.onClick = function () {
        // play shoot animation
        this.shootTime = Const.PlayerShootLifeTime;
        this.playerAni.speed = 1;
        // get ray
        var point = new Laya.Vector2();
        point.x = Laya.MouseManager.instance.mouseX;
        point.y = Laya.MouseManager.instance.mouseY;
        var ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        this.camera.viewportPointToRay(point, ray);
        // raycast detection
        var hitResult = [];
        if (this.scene3D.physicsSimulation.rayCastAll(ray, hitResult, 30)) {
            for (var _i = 0, hitResult_1 = hitResult; _i < hitResult_1.length; _i++) {
                var item = hitResult_1[_i];
                // console.log(item.collider.owner.name);
            }
        }
        // generate bullet
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        var bulletScript = bullet.addComponent(Bullet_1.default);
        bulletScript.setDirection(ray.origin, ray.direction);
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"../Const":3,"../component/Bullet":4,"../component/Zombie":5,"../component/ZombieShield":6,"./../../ui/layaMaxUI":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
